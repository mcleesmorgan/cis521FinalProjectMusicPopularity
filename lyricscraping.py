# -*- coding: utf-8 -*-
"""LyricScraping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t9RuAt_jjfQT9ECFiKkUGT9anqn9cdxK
"""

!pip install lyricsgenius
!pip install langdetect

import pandas as pd
import lyricsgenius as lg
from langdetect import detect

#read in all of the songs
songs = pd.read_csv('/content/SpotifyFeatures.csv', header=0)

#set up the lyrics scraping method
genius = lg.Genius('tIIy_8qNqCKtFVAUhcqR3trBH8PTrkhjQcE0f18h2Ppl7-B8WKGg8uaTBPQj1yQs', skip_non_songs=True, excluded_terms=["(Remix)", "(Live)"], remove_section_headers=True)

def getLyrics(name):
  try: 
    lyr = genius.search_song(title=name).lyrics
    return lyr
  except:
    print("no lyrics")
    return ""

#get the lyrics for all songs and store in pandas dataframe 
songs = songs.drop(['genre', 'track_id', 'acousticness', 
            'danceability', 'duration_ms', 'energy', 'instrumentalness', 
            'key', 'liveness', 'loudness', 'mode', 'speechiness', 'tempo',
            'time_signature', 'valence'], axis=1)

songs = songs.drop_duplicates(subset=['artist_name', 'track_name'])

songs = songs.drop(['artist_name'], axis=1)

def langTitle(row):
  print(row['track_name'])
  try:
    return detect(row['track_name'])
  except:
    return ""

def langLyrics(string):
  try:
    return detect(string)
  except: 
    return "boo"
    
songs['languages'] = songs.apply(lambda x : lang(x), axis=1)

songs.to_csv('/content/SpotifyFeaturesLanguages.csv', index=False)

#filter out every song that is not detected as english by just the title
songLanguages = pd.read_csv('/content/SpotifyFeaturesLanguages.csv', header=0)
songLanguages = songLanguages[songLanguages["languages"] == "en"]
songLanguages.to_csv('/content/SpotifyFeaturesEnglish.csv', index=False)

#read the songs saved as english and get their lyrics
songLanguages = pd.read_csv('/content/SpotifyFeaturesEnglish.csv', header=0)

index = 7500
while index != len(songLanguages):
  try:
    songLanguages.loc[index, "lyrics"]
  except:
    if "feat" not in songLanguages.loc[index, 'track_name'] and songLanguages.loc[index, 'popularity'] >= 55:
      songLanguages.loc[index, "lyrics"] = getLyrics(songLanguages.loc[index, "track_name"])
    else: 
      songLanguages.loc[index, "lyrics"] = ""
  
  if ("feat" not in songLanguages.loc[index, 'track_name'] and type(songLanguages.loc[index, "lyrics"])) and songLanguages.loc[index, 'popularity'] >= 55:
    songLanguages.loc[index, "lyrics"] = getLyrics(songLanguages.loc[index, "track_name"])
  else: 
    songLanguages.loc[index, "lyrics"] = ""

  index = index + 1
  if index % 500 == 0:
    songLanguages[index-500:index+1].to_csv('/content/SpotifyFeaturesLyrics' + str(index) + '.csv', index=False)

#filter out songs that don't have lyrics / songs that aren't lyrics for each file
#also songs that aren't in english

fileNames = ["SpotifyFeaturesLyrics7000.csv", "SpotifyFeaturesLyrics7500.csv", "SpotifyFeaturesLyrics8000.csv",\
             "SpotifyFeaturesLyrics8500.csv", "SpotifyFeaturesLyrics9000.csv"]
for i in range(len(fileNames)):
  df = pd.read_csv(fileNames[i])
  #no lyrics
  df.dropna(inplace=True)
  #isn't english
  df['lang_lyrics'] = df.apply(lambda x: langLyrics(x['lyrics']), axis = 1)
  df = df[df['lang_lyrics'] == 'en']
  #aren't lyrics -> if delimit string makes three things and a dash and then \n
  df['feat'] = df.apply(lambda x: "feat" in x['track_name'], axis=1)
  df = df[df['feat'] != True]
  df.to_csv("SpotifyFeaturesLyricsEdited" + str(i) + ".csv")